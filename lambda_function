import boto3
import uuid
import json
import re  

def lambda_handler(event, context):
    try:
        record = event['Records'][0]
        s3bucket = record['s3']['bucket']['name']
        s3object = record['s3']['object']['key']
        
        # Constructing the correct S3 object URI
        s3Path = f"s3://{s3bucket}/{s3object}"

        jobName = re.sub(r'[^0-9a-zA-Z._-]', '-', s3object) + '-' + str(uuid.uuid4())

        transcribe_client = boto3.client('transcribe')

        # Validate media format
        media_format = event.get('media_format', 'mp3')
        valid_formats = ['mp3', 'mp4', 'wav', 'flac', 'amr', 'ogg', 'webm']
        if media_format.lower() not in valid_formats:
            raise ValueError(f"Invalid media format. Supported formats are: {', '.join(valid_formats)}")

        # Specify IdentifyLanguage parameter to enable automatic language identification
        identify_language = True

        # Optional: Specify LanguageOptions if you want to restrict language identification
        language_options = event.get('language_options', ['en-US','te-IN','hi-IN','ko-KR','ja-JP','zh-CN','fr-CA','en-IN'

])
        if not language_options:
            language_options = None

        # Specify the output file name
        output_key = f"{s3object.split('/')[-1]}.json"  # Assuming the output will be a text file

        response = transcribe_client.start_transcription_job(
            TranscriptionJobName=jobName,
            MediaFormat=media_format.lower(),  # Convert to lowercase to match Amazon Transcribe's format
            Media={
                'MediaFileUri': s3Path
            },
            OutputBucketName="output-textfiles",
            OutputKey=output_key,  # Use the same name as the input object
            IdentifyLanguage=identify_language,
            LanguageOptions=language_options
        )

        return {
            'statusCode': 200,
            'body': json.dumps('Transcription job started successfully!')
        }
    except Exception as e:
        return {
            'statusCode': 400,
            'body': json.dumps(str(e))
        }
